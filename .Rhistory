print('okay, I have the answer')
pause(3)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
pause(6)
print('Tim')
}
else{
pause(3)
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs("Mike's name")
WhatIs("2 squared")
WhatIs("Tim's name")
WhatIs("the capital of Georgia")
HowIs <- function(x){
q <- paste('How is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim so smart"){
for (i in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('almost done')
pause(10)
print('okay, I have the answer')
pause(3)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
pause(6)
print('He just is')
}
}
HowIs("Tim so smart")
HowIs("Tim so smart")
states
state
state.name
library(zoo)
library(devtools)
??devtools
library(codetools)
library(pkgbuild)
library(splines)
library(adept)
library(forecast)
?ets
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,1)
interval = 12
test_length = 1
P <- 1
boxcox <- F
scale_inputs = T
repeats <- 20
library(forecast)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
if (ncol(data) > 1){
future_externals = data.frame(read.csv('tmp/tmp_r_future.csv'))
externals <- names(data)[2:ncol(data)]
data_c <- data[,externals, drop=FALSE]
data_f <- future_externals[,externals, drop=FALSE]
all_externals_ts <- ts(rbind(data_c,data_f),start=start_p,deltat=1/interval)
xreg_c <- subset(all_externals_ts,start=1,end=nrow(data))
xreg_tr <- subset(all_externals_ts,start=1,end=nrow(data)-test_length)
xreg_te <- subset(all_externals_ts,start=nrow(data)-test_length+1,end=nrow(data))
if (test_length == 1){
xreg_te <- t(xreg_te)
}
xreg_f <- subset(all_externals_ts,start=nrow(data)+1)
} else {
xreg_c <- NULL
xreg_tr <- NULL
xreg_te <- NULL
xreg_f <- NULL
}
xreg_tr
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
f
p <- f$mean
p
nn_form <- f$method
write <- data.frame(actual=y_test,
forecast=p)
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write$model_form <- nn_form
write
ar <- nnetar(y,xreg=xreg_c,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
f <- forecast(ar,xreg=xreg_f,h={self.forecast_out_periods})
p <- f$mean
nn_form <- f$method
write <- data.frame(forecast=p)
write$model_form <- nn_form
write <- data.frame(fitted = fitted(ar))
write
write <- data.frame(forecast=p)
write$model_form <- nn_form
write
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 1
P <- 1
boxcox <- F
scale_inputs = T
repeats <- 20
library(forecast)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
if (ncol(data) > 1){
future_externals = data.frame(read.csv('tmp/tmp_r_future.csv'))
externals <- names(data)[2:ncol(data)]
data_c <- data[,externals, drop=FALSE]
data_f <- future_externals[,externals, drop=FALSE]
all_externals_ts <- ts(rbind(data_c,data_f),start=start_p,deltat=1/interval)
xreg_c <- subset(all_externals_ts,start=1,end=nrow(data))
xreg_tr <- subset(all_externals_ts,start=1,end=nrow(data)-test_length)
xreg_te <- subset(all_externals_ts,start=nrow(data)-test_length+1,end=nrow(data))
if (test_length == 1){
xreg_te <- t(xreg_te)
}
xreg_f <- subset(all_externals_ts,start=nrow(data)+1)
} else {
xreg_c <- NULL
xreg_tr <- NULL
xreg_te <- NULL
xreg_f <- NULL
}
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
p <- f$mean
nn_form <- f$method
write <- data.frame(actual=y_test,
forecast=p)
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write$model_form <- nn_form
write
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
p <- f$mean
nn_form <- f$method
write <- data.frame(actual=y_test,
forecast=p)
write
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write
write$actual
write$forecast
p
p[1]
y_test
y_test[1]
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
p <- f$mean[1]
nn_form <- f$method
write <- data.frame(actual=y_test[1],
forecast=p)
write
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 2
P <- 1
boxcox <- F
scale_inputs = T
repeats <- 20
library(forecast)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
if (ncol(data) > 1){
future_externals = data.frame(read.csv('tmp/tmp_r_future.csv'))
externals <- names(data)[2:ncol(data)]
data_c <- data[,externals, drop=FALSE]
data_f <- future_externals[,externals, drop=FALSE]
all_externals_ts <- ts(rbind(data_c,data_f),start=start_p,deltat=1/interval)
xreg_c <- subset(all_externals_ts,start=1,end=nrow(data))
xreg_tr <- subset(all_externals_ts,start=1,end=nrow(data)-test_length)
xreg_te <- subset(all_externals_ts,start=nrow(data)-test_length+1,end=nrow(data))
if (test_length == 1){
xreg_te <- t(xreg_te)
}
xreg_f <- subset(all_externals_ts,start=nrow(data)+1)
} else {
xreg_c <- NULL
xreg_tr <- NULL
xreg_te <- NULL
xreg_f <- NULL
}
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
p <- f$mean[1]
p
p <- f$mean
p
nn_form <- f$method
write <- data.frame(actual=y_test,
forecast=p)
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 1
P <- 1
boxcox <- F
scale_inputs = T
repeats <- 20
library(forecast)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
if (ncol(data) > 1){
future_externals = data.frame(read.csv('tmp/tmp_r_future.csv'))
externals <- names(data)[2:ncol(data)]
data_c <- data[,externals, drop=FALSE]
data_f <- future_externals[,externals, drop=FALSE]
all_externals_ts <- ts(rbind(data_c,data_f),start=start_p,deltat=1/interval)
xreg_c <- subset(all_externals_ts,start=1,end=nrow(data))
xreg_tr <- subset(all_externals_ts,start=1,end=nrow(data)-test_length)
xreg_te <- subset(all_externals_ts,start=nrow(data)-test_length+1,end=nrow(data))
if (test_length == 1){
xreg_te <- t(xreg_te)
}
xreg_f <- subset(all_externals_ts,start=nrow(data)+1)
} else {
xreg_c <- NULL
xreg_tr <- NULL
xreg_te <- NULL
xreg_f <- NULL
}
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
p <- f$mean
nn_form <- f$method
if (test_length==1){
write <- data.frame(actual=y_test[1],
forecast=p[1])
}
if (test_length==1){
write <- data.frame(actual=y_test[1],
forecast=p[1])
} else {
write <- data.frame(actual=y_test,
forecast=p)
}
write
rm(list=ls())
setwd('F:/forecast_cc')
data <- read.csv('tmp_data/tmp_data.csv')
start_p = c(2018,8)
data <- read.csv('tmp_data.csv')
data <- read.csv('tmp/tmp_data.csv')
rm(list=ls())
setwd('F:/forecast_cc')
data <- read.csv('tmp/tmp_data.csv')
data <- read.csv('tmp/tmp_r_current.csv')
start_p = c(2018,8)
interval = 12
test_length = 1
library(forecast)
library(MLmetrics)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
if (ncol(data) > 1){
future_externals = data.frame(read.csv('tmp/tmp_r_future.csv'))
externals <- names(data)[2:ncol(data)]
data_c <- data[,externals, drop=FALSE]
data_f <- future_externals[,externals, drop=FALSE]
all_externals_ts <- ts(rbind(data_c,data_f),start=start_p,deltat=1/interval)
xreg_c <- subset(all_externals_ts,start=1,end=nrow(data))
xreg_tr <- subset(all_externals_ts,start=1,end=nrow(data)-test_length)
xreg_te <- subset(all_externals_ts,start=nrow(data)-test_length+1,end=nrow(data))
if (test_length == 1){
xreg_te <- t(xreg_te)
}
xreg_f <- subset(all_externals_ts,start=nrow(data)+1)
} else {
xreg_c <- NULL
xreg_tr <- NULL
xreg_te <- NULL
xreg_f <- NULL
}
ar <- auto.arima(y_train,xreg=xreg_tr)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
# f[[4]] are point estimates, f[[1]] is the ARIMA form
p <- f[[4]]
arima_form <- f[[1]]
str(ar)
ar$model
if (test_length==1){
write <- data.frame(actual=y_test[1],
forecast=p[1])
} else {
write <- data.frame(actual=y_test,
forecast=p)
}            write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
if (test_length==1){
write <- data.frame(actual=y_test[1],
forecast=p[1])
} else {
write <- data.frame(actual=y_test,
forecast=p)
}
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 1
library(forecast)
library(MLmetrics)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
y_train
y_test
ar <- tbats(y_train,seasonal.periods={season})
ar <- tbats(y_train,seasonal.periods=NULL)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
# f[[2]] are point estimates, f[[9]] is the TBATS form
p <- f[[2]]
tbats_form <- f[[9]]
write <- data.frame(actual=y_test,
forecast=p)
write
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 1
season=NULL
h <- 12
library(forecast)
library(MLmetrics)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
ar <- tbats(y_train,seasonal.periods=NULL)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
# f[[2]] are point estimates, f[[9]] is the TBATS form
p <- f[[2]]
tbats_form <- f[[9]]
if (test_length==1){
write <- data.frame(actual=y_test[1],
forecast=p[1])
} else {
write <- data.frame(actual=y_test,
forecast=p)
}
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write$model_form <- tbats_form
write.csv(write,'tmp/tmp_test_results.csv',row.names=F)
ar <- tbats(y)
f <- forecast(ar,xreg=xreg_f,h={self.forecast_out_periods})
p <- f[[2]]
tbats_form <- f[[9]]
write <- data.frame(forecast=p)
write$model_form <- tbats_form
write.csv(write,'tmp/tmp_forecast.csv',row.names=F)
ar <- tbats(y)
f <- forecast(ar,xreg=xreg_f,h=h)
p <- f[[2]]
tbats_form <- f[[9]]
f
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 1
season=NULL
h <- 12
library(forecast)
library(MLmetrics)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
ar <- tbats(y_train,seasonal.periods=NULL)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
# f[[2]] are point estimates, f[[9]] is the TBATS form
p <- f[[2]]
tbats_form <- f[[9]]
if (test_length==1){
write <- data.frame(actual=y_test[1],
forecast=p[1])
} else {
write <- data.frame(actual=y_test,
forecast=p)
}
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write$model_form <- tbats_form
write.csv(write,'tmp/tmp_test_results.csv',row.names=F)
ar <- tbats(y)
f <- forecast(ar,xreg=xreg_f,h=h)
p <- f[[2]]
tbats_form <- f[[9]]
write <- data.frame(forecast=p)
write$model_form <- tbats_form
write.csv(write,'tmp/tmp_forecast.csv',row.names=F)
write <- data.frame(fitted = fitted(ar))
write.csv(write,'tmp/tmp_fitted.csv',row.names=F)
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 1
season=NULL
h <- 12
library(forecast)
library(MLmetrics)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
ar <- ets(y_train)
f <- forecast(ar,xreg=xreg_te,h=length(y_test))
# f[[2]] are point estimates, f[[8]] is the ETS form
p <- f[[2]]
ets_form <- f[[8]]
if (test_length==1){
write <- data.frame(actual=y_test[1],
forecast=p[1])
} else {
write <- data.frame(actual=y_test,
forecast=p)
}
write$APE <- abs(write$actual - write$forecast) / abs(write$actual)
write$model_form <- ets_form
write.csv(write,'tmp/tmp_test_results.csv',row.names=F)
ar <- ets(y)
f <- forecast(ar,xreg=xreg_f,h=h)
p <- f[[2]]
ets_form <- f[[8]]
write <- data.frame(forecast=p)
write$model_form <- ets_form
write.csv(write,'tmp/tmp_forecast.csv',row.names=F)
write <- data.frame(fitted = fitted(ar))
write.csv(write,'tmp/tmp_fitted.csv',row.names=F)
rm(list=ls())
setwd('F:/forecast_cc')
start_p = c(2018,8)
interval = 12
test_length = 1
season=NULL
h <- 12
library(forecast)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
rm(list=ls())
setwd('F:/AllStatesForecast')
start_p = c(1982,1)
interval = 12
test_length = 1
P <- 1
boxcox <- F
scale_inputs = T
repeats <- 20
library(forecast)
data <- data.frame(read.csv('tmp/tmp_r_current.csv'))
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
if (ncol(data) > 1){
future_externals = data.frame(read.csv('tmp/tmp_r_future.csv'))
externals <- names(data)[2:ncol(data)]
data_c <- data[,externals, drop=FALSE]
data_f <- future_externals[,externals, drop=FALSE]
all_externals_ts <- ts(rbind(data_c,data_f),start=start_p,deltat=1/interval)
xreg_c <- subset(all_externals_ts,start=1,end=nrow(data))
xreg_tr <- subset(all_externals_ts,start=1,end=nrow(data)-test_length)
xreg_te <- subset(all_externals_ts,start=nrow(data)-test_length+1,end=nrow(data))
if (test_length == 1){
xreg_te <- t(xreg_te)
}
xreg_f <- subset(all_externals_ts,start=nrow(data)+1)
} else {
xreg_c <- NULL
xreg_tr <- NULL
xreg_te <- NULL
xreg_f <- NULL
}
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
scale_inputs = F
ar <- nnetar(y_train,xreg=xreg_tr,lambda=boxcox,scale.inputs=scale_inputs,repeats=repeats,P=P)
