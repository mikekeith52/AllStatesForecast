x <- 'hello'
x
WhatIs <- function(x){
q <- paste('What is',x)
print(paste("Now finding the answer to",q))
if (x = "Tim's name"){
for (_ in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('okay, I have the answer')
pause(1)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
print('Tim')
}
else{
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs <- function(x){
q <- paste('What is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim's name"){
for (_ in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('okay, I have the answer')
pause(1)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
print('Tim')
}
else{
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs <- function(x){
q <- paste('What is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim's name"){
for (i in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('okay, I have the answer')
pause(1)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
print('Tim')
}
else{
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs("Tim's name")
library('profvis')
install.packages('profvis')
library('profvis')
WhatIs <- function(x){
q <- paste('What is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim's name"){
for (i in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('okay, I have the answer')
pause(1)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
print('Tim')
}
else{
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs("Tim's name")
library('profvis')
WhatIs <- function(x){
q <- paste('What is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim's name"){
for (i in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('okay, I have the answer')
pause(3)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
pause(6)
print('Tim')
}
else{
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs("Tim's name")
library('profvis')
WhatIs <- function(x){
q <- paste('What is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim's name"){
for (i in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('almost done')
pause(10)
print('okay, I have the answer')
pause(3)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
pause(6)
print('Tim')
}
else{
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs("Tim's name")
WhatIs("Mike's name")
WhatIs <- function(x){
q <- paste('What is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim's name"){
for (i in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('almost done')
pause(10)
print('okay, I have the answer')
pause(3)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
pause(6)
print('Tim')
}
else{
pause(3)
print("I don't know the answer to that yet, but I will soon")
}
}
WhatIs("Mike's name")
WhatIs("2 squared")
WhatIs("Tim's name")
WhatIs("the capital of Georgia")
HowIs <- function(x){
q <- paste('How is',x)
print(paste("Now finding the answer to",q))
if (x == "Tim so smart"){
for (i in seq(1,3)){
print('processing...')
pause(3)
}
print('still searching')
pause(5)
print('almost done')
pause(10)
print('okay, I have the answer')
pause(3)
print(paste('the answer to',q,'is'))
pause(3)
print('...')
pause(6)
print('He just is')
}
}
HowIs("Tim so smart")
HowIs("Tim so smart")
states
state
state.name
library(zoo)
library(devtools)
??devtools
library(codetools)
library(pkgbuild)
library(splines)
library(adept)
rm(list=ls())
Sys.setenv(X13_PATH = 'F:/AllStatesForecast/x13asall_V1.1_B39/x13as')
setwd('F:/AllStatesForecast')
library(forecast)
library(seasonal)
test_length <- 3
interval <- 12
start_p <- c(1982,1)
data <- read.csv('tmp/tmp_r_current.csv')
y <- ts(data$y,start=start_p,deltat=1/interval)
y_train <- subset(y,start=1,end=nrow(data)-test_length)
y_test <- subset(y,start=nrow(data)-test_length+1,end=nrow(data))
if (ncol(data) > 1){
future_externals = read.csv('tmp/tmp_r_future.csv')
r <- max(0,36-nrow(future_externals))
filler <-as.data.frame(replicate(ncol(future_externals),rep(0,r)))
names(filler) <- names(future_externals)
future_externals <- rbind(future_externals,filler)
externals <- names(data)[2:ncol(data)]
data_c <- data.frame(data[,externals])
data_f <- data.frame(future_externals[,externals])
names(data_c) <- externals
names(data_f) <- externals
all_externals_ts <- ts(rbind(data_c,data_f),start=start_p,deltat=1/interval)
} else {
all_externals_ts <- NULL
}
m_test <- tryCatch({seas(x=y_train,xreg=all_externals_ts,forecast.save="forecasts",pickmdl.method="best")},
error = function(e) {
seas(x=y_train,xreg=all_externals_ts,forecast.save="forecasts",outlier.types="ao",arima.model = paste0("(0 1 1)(0 1 1)",interval))
})
m_test <- seas(x=y_train,xreg=all_externals_ts,forecast.save="forecasts",pickmdl.method="best")
p <- series(m_test, "forecast.forecasts")[1:test_length,]
p
series(m_test, "forecast.forecasts")
series(m_test)
plot(m_test)
m <- seas(x=y,xreg=all_externals_ts,forecast.save="forecasts",pickmdl.method="best")
f <- series(m, "forecast.forecasts")[1:26,]
f
summary(m)
